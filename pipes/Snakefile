import os
import re
#import pandas as pd
#======================================================
# Config files
#======================================================
configfile: "config.yaml"

#======================================================
# Global variables
#======================================================

RAW_DATA_DIR =config['input_dir']
RESULTS_DIR=config['results_dir'].rstrip("/")

if RESULTS_DIR == "" and not RAW_DATA_DIR == "":
	RESULTS_DIR=os.path.abspath(os.path.join(RAW_DATA_DIR, os.pardir))


REFERENCE_CONTIGS=config['reference_contigs'].rstrip("/")
REPRESENTATIVE_CONTIGS=REFERENCE_CONTIGS

if REFERENCE_CONTIGS == "":
	REFERENCE_CONTIGS_BASE="positive_contigs"
	REFERENCE_CONTIGS_DIR=RESULTS_DIR + "/04_vOTUs"
	REPRESENTATIVE_CONTIGS_BASE="representative_contigs"
	REPRESENTATIVE_CONTIGS_DIR=RESULTS_DIR + "/05_VIRAL_ID"
else:
	REFERENCE_CONTIGS_BASE=os.path.basename(os.path.abspath(REFERENCE_CONTIGS)).split(".")[0]
	REFERENCE_CONTIGS_DIR=os.path.dirname(os.path.abspath(REFERENCE_CONTIGS)).rstrip("/")
	REPRESENTATIVE_CONTIGS_BASE=REFERENCE_CONTIGS_BASE
	REPRESENTATIVE_CONTIGS_DIR=REFERENCE_CONTIGS_DIR
	if RESULTS_DIR== "":
		RESULTS_DIR=REFERENCE_CONTIGS_DIR
		
print(REFERENCE_CONTIGS_DIR)



RULES_DIR = 'rules'

CONFIDENCE_TYPES=["high", "low"]
SAMPLING_TYPE=config['sampling'].split()
SAMPLES=""


CONTAMINANTS=config['contaminants_list'].split()
NANOPORE=False
PAIRED=False
POOLED=config['nanopore_pooled']
READ_TYPES=[config['forward_tag']]


if not RAW_DATA_DIR == "":
	RAW_DATA_DIR=RAW_DATA_DIR.rstrip("/")
	SAMPLES,=glob_wildcards(RAW_DATA_DIR + "/{sample}_" + config['forward_tag'] + ".fastq")
	for fname in os.listdir(RAW_DATA_DIR):
		if fname.endswith(config['reverse_tag'] + '.fastq'):
			PAIRED=True
		elif fname.endswith(config['nanopore_tag'] + '.fastq'):
			NANOPORE=True


NANOPORE_SAMPLES=SAMPLES

if PAIRED:
	READ_TYPES.append(config['reverse_tag'])
if POOLED == "True":
	NANOPORE_SAMPLES=config['nanopore_pooled_name']
if len(SAMPLES)==1:
	SAMPLING_TYPE=["tot"]

dir_list = ["RULES_DIR","ENVS_DIR", "ADAPTERS_DIR", "CONTAMINANTS_DIR","RAW_DATA_DIR", "QC_DIR", "CLEAN_DATA_DIR", "ASSEMBLY_DIR", "vOUT_DIR", "VIRAL_DIR", "MAPPING_DIR", "MMSEQS", "ANNOTATION"]
dir_names = ["rules", "../envs", "db/adapters",  RESULTS_DIR + "/db/contaminants" ,RAW_DATA_DIR, RESULTS_DIR + "/01_QC", RESULTS_DIR + "/02_CLEAN_DATA", RESULTS_DIR + "/03_CONTIGS", REFERENCE_CONTIGS_DIR, REPRESENTATIVE_CONTIGS_DIR ,RESULTS_DIR + "/05_MAPPING", RESULTS_DIR + "/06_MMSEQS", RESULTS_DIR + "/07_ANNOTATION"]
dirs_dict = dict(zip(dir_list, dir_names))

print("Read Types = " )
print(*READ_TYPES, sep = ", ")

print("Sample Names = ")
print(*SAMPLES, sep = ", ")

print("Contaminants = ")
print(*CONTAMINANTS, sep = ", ")

print("Reference contigs = ")
print(REFERENCE_CONTIGS)

print("Results Dir = ")
print(RESULTS_DIR)
#======================================================
# Rules
#======================================================

def inputAll(wildcards):
	inputs=[]
	inputs.append(dirs_dict["QC_DIR"]+ "/preQC_multiqc_report.html")
	inputs.append(dirs_dict["QC_DIR"]+ "/postQC_multiqc_report.html")
	inputs.extend(expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_quast_report.{sampling}.txt", sample=SAMPLES, sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_abundance_table_json.{sampling}.biom", sampling=SAMPLING_TYPE, confidence=CONFIDENCE_TYPES))
	inputs.extend(expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_summary.{sampling}.txt",sampling=SAMPLING_TYPE))
	inputs.extend(directory(dirs_dict["ANNOTATION"] + "/VIBRANT_" +REPRESENTATIVE_CONTIGS_BASE + ".tot"))
	inputs.extend(dirs_dict["VIRAL_DIR"] + "/" + REFERENCE_CONTIGS_BASE + ".tot" + "_annotated.csv")
	if NANOPORE=="True":
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_preQC.html",sample_nanopore=NANOPORE_SAMPLES))
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_postQC.html", sample_nanopore=NANOPORE_SAMPLES))
	return inputs

rule all:
	input:
		inputAll,

rule clean_reads:
	input:
		(dirs_dict["QC_DIR"]+ "/postQC_multiqc_report.html"),

rule abundance_from_db_contigs:
	input:
		expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_abundance_table.tot.txt", sample = SAMPLES)

rule assembly_vs_reference:
	input:
		(dirs_dict["MMSEQS"] + "/tmp")

rule assembly:
	input:
		expand(dirs_dict["ASSEMBLY_DIR"] + "/assembly_quast_report.{sampling}.txt", sampling=SAMPLING_TYPE),

rule annotate_contigs:
	input:
		vibrant=directory(dirs_dict["VIRAL_DIR"] + "/VIBRANT_" + REPRESENTATIVE_CONTIGS_BASE + ".tot"),

rule runVirSorter:
	input:
		expand(dirs_dict["VIRAL_DIR"] + "/virSorter_{sampling}/VIRSorter_global-phage-signal.csv", sampling=["tot"])

include: os.path.join(RULES_DIR, 'downloadTools.smk')
include: os.path.join(RULES_DIR, 'qualityControl.smk')
include: os.path.join(RULES_DIR, 'assembly.smk')
include: os.path.join(RULES_DIR, 'vOTUclustering.smk')
include: os.path.join(RULES_DIR, 'viralIdentification.smk')
include: os.path.join(RULES_DIR, 'abundance.smk')
include: os.path.join(RULES_DIR, 'taxonomyAssignment.smk')
include: os.path.join(RULES_DIR, 'resultsParsing.smk')
include: os.path.join(RULES_DIR, 'viralAnnotation.smk')
