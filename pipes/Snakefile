import os
import re
#import pandas as pd
#======================================================
# Config files
#======================================================
configfile: "config.yaml"

#======================================================
# Global variables
#======================================================

RAW_DATA_DIR =config['input_dir']
RESULTS_DIR=config['results_dir'].rstrip("/")
LONG_ASSEMBLER=config['long_assembler']

if RESULTS_DIR == "" and not RAW_DATA_DIR == "":
	RESULTS_DIR=os.path.abspath(os.path.join(RAW_DATA_DIR, os.pardir))


VIRAL_CONTIGS=config['VIRAL_CONTIGS'].rstrip("/")
REPRESENTATIVE_CONTIGS=VIRAL_CONTIGS
if VIRAL_CONTIGS == "":
	VIRAL_CONTIGS_BASE="positive_contigs"
	VIRAL_CONTIGS_DIR=RESULTS_DIR + "/04_VIRAL_ID"
	REPRESENTATIVE_CONTIGS_BASE="95-80_positive_contigs"
	REPRESENTATIVE_CONTIGS_DIR=RESULTS_DIR + "/05_vOTUs"
else:
	VIRAL_CONTIGS_BASE=os.path.basename(os.path.abspath(VIRAL_CONTIGS)).split(".")[0]
	VIRAL_CONTIGS_DIR=os.path.dirname(os.path.abspath(VIRAL_CONTIGS)).rstrip("/")
	REPRESENTATIVE_CONTIGS_BASE=VIRAL_CONTIGS_BASE
	REPRESENTATIVE_CONTIGS_DIR=VIRAL_CONTIGS_DIR
	if RESULTS_DIR== "":
		RESULTS_DIR=VIRAL_CONTIGS_DIR

print(VIRAL_CONTIGS_DIR)



RULES_DIR = 'rules'

CONFIDENCE_TYPES=["high", "low"]
SAMPLING_TYPE=config['sampling'].split()
SAMPLES=""

SRA_list=config['sra_list'].split()

CONTAMINANTS=config['contaminants_list'].split()
NANOPORE=False
PAIRED=False
READ_TYPES=[config['forward_tag']]
POOLED=config['nanopore_pooled']

if not RAW_DATA_DIR == "":
	RAW_DATA_DIR=RAW_DATA_DIR.rstrip("/")
	SAMPLES,=glob_wildcards(RAW_DATA_DIR + "/{sample}_" + config['forward_tag'] + ".fastq")
	for fname in os.listdir(RAW_DATA_DIR):
		if fname.endswith(config['reverse_tag'] + '.fastq'):
			PAIRED=True
		elif fname.endswith(config['nanopore_tag'] + '.fastq'):
			NANOPORE=True
else:
	RAW_DATA_DIR=RESULTS_DIR+"/00_RAW_DATA"


NANOPORE_SAMPLES=SAMPLES

if PAIRED:
	READ_TYPES.append(config['reverse_tag'])
if POOLED:
	print("Nanopore reads are from a pooled sample")
	NANOPORE_SAMPLES=config['nanopore_pooled_name']
if len(SAMPLES)==1:
	SAMPLING_TYPE=["tot"]

dir_list = ["RULES_DIR","ENVS_DIR", "ADAPTERS_DIR", "CONTAMINANTS_DIR","RAW_DATA_DIR", "QC_DIR", "CLEAN_DATA_DIR", "ASSEMBLY_DIR", "VIRAL_DIR", "vOUT_DIR", "MAPPING_DIR", "MMSEQS", "ANNOTATION"]
dir_names = ["rules", "../envs", "db/adapters",  RESULTS_DIR + "/db/contaminants" ,RAW_DATA_DIR, RESULTS_DIR + "/01_QC", RESULTS_DIR + "/02_CLEAN_DATA", RESULTS_DIR + "/03_CONTIGS", VIRAL_CONTIGS_DIR , REPRESENTATIVE_CONTIGS_DIR ,RESULTS_DIR + "/06_MAPPING", RESULTS_DIR + "/08_MMSEQS", RESULTS_DIR + "/07_ANNOTATION"]
dirs_dict = dict(zip(dir_list, dir_names))

print("Read Types = " )
print(*READ_TYPES, sep = ", ")

print("Sample Names = ")
print(*SAMPLES, sep = ", ")

print("Contaminants = ")
print(*CONTAMINANTS, sep = ", ")

print("Reference contigs = ")
print(VIRAL_CONTIGS)

print("Results Dir = ")
print(RESULTS_DIR)
print("Nanopore = ")
print(NANOPORE)

print("Nanopore sampes= ")
print(NANOPORE_SAMPLES)
#======================================================
# Rules
#======================================================

def inputAll(wildcards):
	inputs=[]
	inputs.append(dirs_dict["QC_DIR"]+ "/preQC_illumina_report.html")
	inputs.append(dirs_dict["QC_DIR"]+ "/postQC_illumina_report.html")
	inputs.extend(expand(dirs_dict["ASSEMBLY_DIR"] + "/assembly_quast_report.{sampling}.txt", sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_abundance_table_json.{sampling}.biom", sampling=SAMPLING_TYPE, confidence=CONFIDENCE_TYPES))
	inputs.extend(expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_summary.{sampling}.txt",sampling=SAMPLING_TYPE))
	inputs.append(dirs_dict["ANNOTATION"] + "/" + REPRESENTATIVE_CONTIGS_BASE + ".tot" + "_annotated.csv")
	inputs.extend(expand(dirs_dict["VIRAL_DIR"] + "/taxonomy_report_" + REPRESENTATIVE_CONTIGS_BASE + ".{sampling}.tbl",sampling=SAMPLING_TYPE))

	if NANOPORE:
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_preQC.html",sample_nanopore=NANOPORE_SAMPLES))
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_postQC.html", sample_nanopore=NANOPORE_SAMPLES))
	return inputs

rule all:
	input:
		inputAll,

def inputCleanReads(wildcards):
	inputs=[]
	inputs.append(dirs_dict["QC_DIR"]+ "/postQC_illumina_report.html")
	if NANOPORE:
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_postQC.html", sample_nanopore=NANOPORE_SAMPLES))
	return inputs

rule clean_reads:
	input:
		inputCleanReads

rule abundance_from_db_contigs:
	input:
		expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_abundance_table.tot.txt", sample = SAMPLES)

rule assembly_vs_reference:
	input:
		(dirs_dict["MMSEQS"] + "/tmp")

rule assembly:
	input:
		expand(dirs_dict["ASSEMBLY_DIR"] + "/assembly_quast_report.{sampling}.txt", sampling=SAMPLING_TYPE),
#		scaffolds=expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_"+ LONG_ASSEMBLER + "_corrected_scaffolds.tot.fasta", sample=SAMPLES),

rule annotate_contigs:
	input:
		vibrant=(dirs_dict["VIRAL_DIR"] + "/VIBRANT_" + REPRESENTATIVE_CONTIGS_BASE + ".tot"),

rule annotate_VIGAdir:
	input:
		genomes_dir=(dirs_dict["VIRAL_DIR"] + "/VIBRANT_" + REPRESENTATIVE_CONTIGS_BASE + ".tot"),

rule runVirSorter:
	input:
		expand(dirs_dict["VIRAL_DIR"] + "/virSorter_{sampling}/VIRSorter_global-phage-signal.csv", sampling=["tot"])

rule getSRA_runs:
	input:
		forward=expand(dirs_dict["RAW_DATA_DIR"] + "/{SRA}_pass_1.fastq", SRA=SRA_list),
		reverse=expand(dirs_dict["RAW_DATA_DIR"] + "/{SRA}_pass_2.fastq", SRA=SRA_list),

rule taxonomyAssignmentvContact:
	input:
		genome_file=dirs_dict["VIRAL_DIR"]+ "/" + VIRAL_CONTIGS_BASE + "_vContact.tot/genome_by_genome_overview.csv",

rule taxonomyAssignmenMMseqs:
	input:
		html=(dirs_dict["vOUT_DIR"] + "/taxonomy_report_" + REPRESENTATIVE_CONTIGS_BASE + ".{sampling}.html"),


rule runALE:
	input:
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_short_read.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_hybrid_assembly.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_long_read.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_WEC_spades_filtered_scaffolds.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_WEC_contigs_canu.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_flye_combined_assembly_WEC.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_racon_WEC_contigs_1_canu.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_WEC_canu_corrected_scaffolds.tot.ale", sample=SAMPLES),


# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/hybrid_assembly.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/long_read.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/short_read.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/WEC_spades_filtered_scaffolds.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/WEC_contigs_canu.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/flye_combined_assembly_WEC.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/racon_WEC_contigs_1_canu.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/WEC_canu_corrected_scaffolds.tot.fasta

include: os.path.join(RULES_DIR, '00_download_tools.smk')
include: os.path.join(RULES_DIR, '01_quality_control_short.smk')
include: os.path.join(RULES_DIR, '02_assembly_short.smk')
include: os.path.join(RULES_DIR, '03_viral_identification.smk')
include: os.path.join(RULES_DIR, '04_vOTU_clustering.smk')
include: os.path.join(RULES_DIR, '05_taxonomy_assignment.smk')
include: os.path.join(RULES_DIR, '06_viral_annotation.smk')
include: os.path.join(RULES_DIR, 'resultsParsing.smk')
include: os.path.join(RULES_DIR, 'abundance.smk')


if NANOPORE==True:
	include: os.path.join(RULES_DIR, '01_quality_control_long.smk')
	include: os.path.join(RULES_DIR, '02_assembly_long.smk')
