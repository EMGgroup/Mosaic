import os
import re
#import pandas as pd
#======================================================
# Config files
#======================================================
configfile: "config.yaml"

#======================================================
# Global variables
#======================================================

RAW_DATA_DIR =config['input_dir'].rstrip("/") 
RESULTS_DIR=config['results_dir'].rstrip("/")
dir_list = ["RULES_DIR","ENVS_DIR", "ADAPTERS_DIR", "CONTAMINANTS_DIR","RAW_DATA_DIR", "QC_DIR", "CLEAN_DATA_DIR", "ASSEMBLY_DIR", "vOUT_DIR", "VIRAL_DIR", "MAPPING_DIR", "PROFILE_DIR", "MERGE_DIR"]
dir_names = ["rules", "../envs", "db/adapters", "db/contaminants" ,RAW_DATA_DIR, RESULTS_DIR + "/01_QC", RESULTS_DIR + "/02_CLEAN_DATA",RESULTS_DIR + "/03_CONTIGS", RESULTS_DIR + "/04_vOTUs", RESULTS_DIR + "/05_VIRAL_ID",RESULTS_DIR + "/06_MAPPING", "05_ANVIO_PROFILE", "06_MERGED"]
dirs_dict = dict(zip(dir_list, dir_names))
RULES_DIR = 'rules'
SAMPLING_TYPE=["sub", "tot"]
SAMPLES,=glob_wildcards(RAW_DATA_DIR + "/{sample}_" + config['forward_tag'] + ".fastq")
CONTAMINANTS=config['contaminants_list']
NANOPORE=False
PAIRED=False
READ_TYPES=[config['forward_tag']]

for fname in os.listdir(RAW_DATA_DIR):
	if fname.endswith(config['reverse_tag'] + '.fastq'):
		PAIRED=True
	elif fname.endswith(config['nanopore_tag'] + '.fastq'):
		NANOPORE=True
if PAIRED:
	READ_TYPES.append(config['reverse_tag'])

#CONTAMINANTS_LIST= config[contaminants_list]

########################################
# Helper functions
########################################


#======================================================
# Rules
#======================================================
 
rule all:
	input:
		#Viral Contigs
#		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_quast_report.{sampling}.txt", sample=SAMPLES, sampling=SAMPLING_TYPE),
		expand(dirs_dict["MAPPING_DIR"]+ "/{sample}_high_confidence_filtered.{sampling}.bam", sample=SAMPLES, sampling=SAMPLING_TYPE),
#		expand(dirs_dict["CLEAN_DATA_DIR"]+ "/{sample}_unpaired_clean.sub.fastq", sample=SAMPLES),
#		expand(dirs_dict["VIRAL_DIR"]+ "/high_confidence.{sampling}.fasta", sampling=SAMPLING_TYPE),
#		expand(dirs_dict["VIRAL_DIR"]+ "/low_confidence.{sampling}.fasta", sampling=SAMPLING_TYPE)
		#expand(dirs_dict["vOUT_DIR"] + "/{sample}_circlator",sample=SAMPLES)


include: os.path.join(RULES_DIR, 'qualityControl.smk')
include: os.path.join(RULES_DIR, 'assembly.smk')
include: os.path.join(RULES_DIR, 'vOTUclustering.smk')
include: os.path.join(RULES_DIR, 'viralFiltering.smk')
include: os.path.join(RULES_DIR, 'abundance.smk')

#00_Raw_data	(raw_data_dir)
#	Illumina
#	Nanopore
#
#01_Quality_control (qc_dir)
#	fastQC
#	QC_data

#wget http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz
#gunzip hg38.fa.gz


